/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ../public/models/heart/scene.gltf
Author: Diego T. Yamaguchi (https://sketchfab.com/freshlybaked)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/heart-4b1730c3d4b040caadda0fa57d0d2e60
Title: Heart
*/

import React, { useRef } from 'react'
import * as THREE from "three";

import { useGLTF, shaderMaterial } from '@react-three/drei'
import { useFrame, extend, useLoader } from "@react-three/fiber";
import { MeshPhysicalMaterial, TextureLoader } from "three";

import vertexShader from "./shaders/heart_vertex.glsl";
import fragmentShader from "./shaders/heart_fragment.glsl";

import { EaseInOutElastic } from "./animation_helper";

export default function Model(props) {
	const mat_ref = useRef();
	const mat_ref2 = useRef();
	const { nodes, materials } = useGLTF('/models/heart/scene.gltf');
	let x = 0;
	useFrame(({clock, mouse }) =>{
		let t = clock.getElapsedTime();

		if(mat_ref.current){
			mat_ref.current.uniforms = {u_time: {value: t}}
		}
		let a = Math.cos(t);
		let b = Math.sin(t);
		mat_ref.current.position.x = a * 0.5;
		mat_ref2.current.position.x = a * 0.5;
		mat_ref.current.position.y = b * 0.5;
		mat_ref2.current.position.y = b * 0.5;

		mat_ref.current.rotation.z += a * 0.005;
		mat_ref2.current.rotation.z += a * 0.005;

		// how to scale 10 * 10 to the ratio of 0.02
		let d = mat_ref.current.scale.x;
		let g;
		if (x < 1 && d <= 11) {
			g = EaseInOutElastic(x);
			d = d - (d * g),
			mat_ref.current.scale.set(d, d, d);
			x += 0.01;
        } else {
			x = 0; g = EaseInOutElastic(x); d = 10;
			mat_ref.current.scale.set(d, d, d);
		}
		// console.log(g, {d});
		// console.log(clock.elapsedTime );
	})
	// let uniforms = {
	// 	mat_texture: {
	// 		value: texture
	// 	},
	// }
	return (
		<group {...props} dispose={null}>
			<mesh
				ref={mat_ref}
				geometry={nodes.Object_2.geometry} 
				// material={materials['Material.001']}
				// rotation={[-Math.PI / 1.8, 0, 0]}
				rotation={[-Math.PI / 2, 0, 0]}
				scale={10}
				>
					<meshPhysicalMaterial
						roughness={10}
						metalness={0.0}
						reflectivity={1.5}
						transmission={0}
						thickness={1}
						color={0x800080}
						// blending={THREE.AdditiveBlending}
					/>
			</mesh>
			<mesh
				ref={mat_ref2}
				geometry={nodes.Object_2.geometry} 
				// material={materials['Material.001']}
				// rotation={[-Math.PI / 1.8, 0, 0]}
				rotation={[-Math.PI / 2, 0, 0]}
				scale={11}
				>
					<shaderMaterial
						vertexShader={vertexShader}
						fragmentShader={fragmentShader}
						blending={THREE.AdditiveBlending}
						side={THREE.BackSide}
					/>
			</mesh>
		</group>
	)
}

useGLTF.preload('/models/heart/scene.gltf')
